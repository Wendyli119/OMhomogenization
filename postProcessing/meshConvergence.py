# -*- coding: utf-8 -*-
"""
Created on Fri Aug  8 12:12:27 2025

@author: xli2
"""

import numpy as np
import matplotlib.pyplot as plt

plt.rcParams.update({
    'font.size': 12,
    "text.usetex": True,
    "font.family": "serif",
    "font.serif": ["Times New Roman"], 
})
plt.rcParams['xtick.direction'] = 'in'
plt.rcParams['ytick.direction'] = 'in'
plt.rcParams['axes.xmargin'] = 0

panelSideLength = 20.0

# Reference properties of detailed model
vxyDet = -2.24412
ExDet = 0.0865337
EyDet = 0.0186799
GxyDet = 14.5557
vbxyDet = 2.25758
MxDet = 1.23134
MyDet = 0.244747
TxyDet = 0.0472958
elasConstDet = np.array([-2.24412,0.0865337,0.0186799,14.5557,2.25758,1.23134,0.244747,0.0472958])

# Asymptotic homogenization
meshSizes = np.array([1.,1./2,1./3,1./4,1./5,1./6,1./7, 1./8, 1./10, 1./12, 1./13, 1./14.])*panelSideLength/2.0#
numelem = panelSideLength/meshSizes
# mesh convergence results
laminaAH = {'theta30Kcr1_98mesh1_25': {'v21': -0.4389167856401038, 'vb21': 0.43919809819422134, 'vb12': 2.2405561857865965, 'v12': -2.243134774544445, 'M1': 1.2703741400124315, 'T12': 0.043814373063690265, 'M2': 0.24902116261489785, 'E1': 0.09436395490355239, 'G12': 13.717645320914873, 'E2': 0.01846430461360327},'theta30Kcr1_98mesh1_6666666666666665': {'v21': -0.4397047755015919, 'vb21': 0.4397728066851968, 'vb12': 2.2405051320138143, 'v12': -2.2425843966705243, 'M1': 1.2634460291422946, 'T12': 0.04440051090661349, 'M2': 0.24799282911338943, 'E1': 0.09394386434344902, 'G12': 13.770235874144507, 'E2': 0.01841962596467538}, 'theta30Kcr1_98mesh5_0': {'v21': -0.44224894533761383, 'vb21': 0.4413208194943129, 'vb12': 2.242356771851535, 'v12': -2.243500281599061, 'M1': 1.4220555410621079, 'T12': 0.058439864527181966, 'M2': 0.2798763892642101, 'E1': 0.09305653182935655, 'G12': 14.417568899459647, 'E2': 0.018343725381204896}, 'theta30Kcr1_98mesh3_333333333333333': {'v21': -0.44147720411445446, 'vb21': 0.44095581989085386, 'vb12': 2.2403278557592645, 'v12': -2.241487984001345, 'M1': 1.3420931141168808, 'T12': 0.05029942995230593, 'M2': 0.2641594479057672, 'E1': 0.09656088013787245, 'G12': 14.051374421317218, 'E2': 0.019018360880971513}, 'theta30Kcr1_98mesh2_0': {'v21': -0.4402813848668442, 'vb21': 0.44016721234274553, 'vb12': 2.2393056051810296, 'v12': -2.241677322841931, 'M1': 1.3032760698092851, 'T12': 0.046650322424633815, 'M2': 0.25617735838900235, 'E1': 0.09436557126122787, 'G12': 13.818448680893537, 'E2': 0.018534069990935063}, 'theta30Kcr1_98mesh1_0': {'v21': -0.43837385968366843, 'vb21': 0.43882783876416775, 'vb12': 2.240876414540314, 'v12': -2.2435676667570537, 'M1': 1.258548661175963, 'T12': 0.043113975558143385, 'M2': 0.24645990532087372, 'E1': 0.09410409585537048, 'G12': 13.690535031900671, 'E2': 0.01838713238891927}, 'theta30Kcr1_98mesh2_5': {'v21': -0.440878473857848, 'vb21': 0.4404950932635288, 'vb12': 2.239191044232487, 'v12': -2.241189465420062, 'M1': 1.342092869764213, 'T12': 0.04818459383922835, 'M2': 0.26401736705665535, 'E1': 0.0951283705292588, 'G12': 13.898534756189452, 'E2': 0.018713299998339386}, 'theta30Kcr1_98mesh1_4285714285714284': {'v21': -0.4392266811284277, 'vb21': 0.4393696515233348, 'vb12': 2.2402196954857647, 'v12': -2.242849158316184, 'M1': 1.2946511881099736, 'T12': 0.045543126494982496, 'M2': 0.2539172575396925, 'E1': 0.09493366718988407, 'G12': 13.739659333464969, 'E2': 0.018591263443890164}, 'theta30Kcr1_98mesh10_0': {'v21': -0.4437825720097539, 'vb21': 0.443521347739305, 'vb12': 2.2456285717288895, 'v12': -2.2467853014038437, 'M1': 0.8953711038139527, 'T12': 0.0414003654721198, 'M2': 0.17683966248463664, 'E1': 0.05951709302490492, 'G12': 15.797652922634237, 'E2': 0.011755751029986201},'theta30Kcr1_98mesh0_7142857142857142': {'v21': -0.4375947816369226, 'vb21': 0.4383101289038159, 'vb12': 2.2412945575470244, 'v12': -2.2441745430410704, 'M1': 1.2480689447914455, 'T12': 0.042340758070465986, 'M2': 0.2440737912963546, 'E1': 0.09416238454509462, 'G12': 13.664063398435305, 'E2': 0.01836085710498523}, 'theta30Kcr1_98mesh0_8333333333333333': {'v21': -0.43788824545026483, 'vb21': 0.43847607816430445, 'vb12': 2.241477320120194, 'v12': -2.2441950481400688, 'M1': 1.2526265409848842, 'T12': 0.042833493484911965, 'M2': 0.24503784542692503, 'E1': 0.09424561636725352, 'G12': 13.67430194060975, 'E2': 0.01838924278290255}, 'theta30Kcr1_98mesh0_7692307692307693': {'v21': -0.43767791343829954, 'vb21': 0.4383294588247634, 'vb12': 2.241562700920659, 'v12': -2.244361120968723, 'M1': 1.254648751108123, 'T12': 0.04254033507498463, 'M2': 0.24534201423966975, 'E1': 0.09451618951773898, 'G12': 13.668756958541994, 'E2': 0.01843181483931942}}
elasConsts = ['v12','E1','E2','G12','vb12','M1','M2','T12']
categories2 = [r'$\nu_{12}$', r'$E_1$', r'$E_2$',r'$G_{12}$',r'$\nu^b_{12}$', r'$M_1$', r'$M_2$',r'$T_{12}$']
plotlabel = ['(a)','(b)','(c)','(d)']
colors = [(1,0,0,1),(148/255, 0, 211/255, 0.6),(168/255, 159/255, 46/255),(0, 158/255, 115/255)]
markers = ['X','^','D','o']
fig, subplotAxes = plt.subplots(2, 2, figsize=(7,4), sharex=True,sharey=True)
subplotAxes = subplotAxes.flatten()
for i in np.arange(0,2):
    ax1 = subplotAxes[i]
    if i == 0: ax1.set_ylabel('Error (\%)')
    for j in np.arange(0,4):
        k = i*4 + j
        EijErr = np.zeros((len(meshSizes),1))
        EijAH = np.zeros((len(meshSizes),1))
        for meshSize in range(len(meshSizes)):
                modelName = 'theta30Kcr1_98mesh'+str(meshSizes[meshSize]).replace(".","_")
                EijAH[meshSize] = laminaAH[modelName][elasConsts[k]]
                EijErr[meshSize] = abs(EijAH[meshSize]-elasConstDet[k])/abs(elasConstDet[k])*100
        if j == 2:
            ax1.plot(numelem,EijErr,label=categories2[k],marker=markers[j],color=colors[j],markersize=4.5)
        else:
            ax1.plot(numelem,EijErr,label=categories2[k],marker=markers[j],color=colors[j])
    ax1.legend(loc='upper left', bbox_to_anchor=(0.6, 0.95))
    ax1.annotate(
            plotlabel[i],
            xy=(0.5, 1), xycoords='axes fraction',
            xytext=(-0.5, -1.5), textcoords='offset fontsize',
            fontsize='medium', verticalalignment='bottom', fontfamily='serif',
            bbox=dict(facecolor='1.0', edgecolor='none', pad=3.0))

# Energy-based homogenization
meshSizes = np.array([1.,1./2, 1./3, 1./4, 1./8, 1./10, 1./14])*panelSideLength/2.0#
numelem = panelSideLength/meshSizes
# mesh convergence results
laminaPBC = {'mesh5_0': {'vb12': 2.2421450848220643, 'v12': -2.243869361243674, 'M1': 1.3433026300938182, 'T12': 0.052157941084999576, 'M2': 0.2643436158088406, 'E1': 0.08227388374331127, 'G12': 13.527760219422662, 'E2': 0.016218215289120153}, 'mesh3_333333333333333': {'vb12': 2.2415011414923285, 'v12': -2.2432551852311238, 'M1': 1.2821767203313148, 'T12': 0.044642563996972466, 'M2': 0.25211677461734183, 'E1': 0.08863918057182149, 'G12': 13.666701518878165, 'E2': 0.01743951507384267},'mesh0_5': {'vb12': 2.243566193833036, 'v12': -2.246084804565862, 'M1': 1.2120750759641803, 'T12': 0.04126191030955556, 'M2': 0.23645970921316106, 'E1': 0.09412782550052097, 'G12': 13.643554324258327, 'E2': 0.01829978142321309}, 'mesh0_7142857142857142': {'vb12': 2.242645078875203, 'v12': -2.2449698752348475, 'M1': 1.21384902234193, 'T12': 0.04141825927137732, 'M2': 0.23721068509935603, 'E1': 0.09357904711964024, 'G12': 13.651580374387642, 'E2': 0.018236342500831837}, 'mesh0_5555555555555556': {'vb12': 2.243540818197199, 'v12': -2.2459841926948143, 'M1': 1.2148596645188816, 'T12': 0.04131627798629083, 'M2': 0.23706298284098892, 'E1': 0.09406201898339842, 'G12': 13.645834684328861, 'E2': 0.018295837140346105}, 'mesh1_0': {'vb12': 2.2421347488889647, 'v12': -2.2442837969882037, 'M1': 1.2168235664962626, 'T12': 0.04162460441907514, 'M2': 0.23814503500279646, 'E1': 0.0931111693656851, 'G12': 13.661738196325748, 'E2': 0.01818422766373229}, 'mesh1_25': {'vb12': 2.2418312960090327, 'v12': -2.2438819672259607, 'M1': 1.224068640005409, 'T12': 0.04172219897408012, 'M2': 0.23979553317682803, 'E1': 0.0927709117478555, 'G12': 13.669597872244125, 'E2': 0.01814435116283719}, 'mesh2_5': {'vb12': 2.240870850223294, 'v12': -2.2428297320263586, 'M1': 1.3152719321797455, 'T12': 0.044357424118532364, 'M2': 0.2583476046791269, 'E1': 0.09218932816733426, 'G12': 13.687806209085796, 'E2': 0.018111425184826224}, 'mesh0_625': {'vb12': 2.2431101823509585, 'v12': -2.2455684224720143, 'M1': 1.2157913488713101, 'T12': 0.041365863121239806, 'M2': 0.23740356205311564, 'E1': 0.09399232166489642, 'G12': 13.648303960023831, 'E2': 0.018296960356599112}, 'mesh10_0': {'vb12': 2.2455147916832874, 'v12': -2.2451048618572904, 'M1': 0.8628375132013745, 'T12': 0.03620451145315837, 'M2': 0.17029659110158946, 'E1': 0.04599350205599558, 'G12': 4.772314416884637, 'E2': 0.00908569251728819}}
for i in np.arange(2,4):
    ax1 = subplotAxes[i]
    if i == 2: ax1.set_ylabel('Error (\%)')
    ax1.set_xlabel('Elements per crease')
    for j in np.arange(0,4):
        k = (i-2)*4 + j
        EijErr = np.zeros((len(meshSizes),1))
        EijPBC = np.zeros((len(meshSizes),1))
        for meshSize in range(len(meshSizes)):
                modelName = 'mesh'+str(meshSizes[meshSize]).replace(".","_")
                EijPBC[meshSize] = laminaPBC[modelName][elasConsts[k]]
                EijErr[meshSize] = abs(EijPBC[meshSize]-elasConstDet[k])/abs(elasConstDet[k])*100
        if j == 2:
            ax1.plot(numelem,EijErr,label=categories2[k],marker=markers[j],color=colors[j],markersize=4.5)
        else:
            ax1.plot(numelem,EijErr,label=categories2[k],marker=markers[j],color=colors[j])
    ax1.legend(loc='upper left', bbox_to_anchor=(0.6, 0.95))
    ax1.annotate(
            plotlabel[i],
            xy=(0.5, 1), xycoords='axes fraction',
            xytext=(-0.5, -1.5), textcoords='offset fontsize',
            fontsize='medium', verticalalignment='bottom', fontfamily='serif',
            bbox=dict(facecolor='1.0', edgecolor='none', pad=3.0))

plt.tight_layout()
plt.subplots_adjust(wspace=0.05,hspace=0.05)
plt.savefig("Convergence.pdf", format="pdf", bbox_inches="tight")
plt.show()
# AH converges at a/16
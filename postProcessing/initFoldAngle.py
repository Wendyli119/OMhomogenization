# -*- coding: utf-8 -*-
"""
Created on Fri Aug  8 12:24:14 2025

@author: xli2
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import interp1d
from mpl_toolkits.axes_grid1.inset_locator import inset_axes

plt.rcParams.update({
    'font.size': 12,
    "text.usetex": True,
    "font.family": "serif",
    "font.serif": ["Times New Roman"],
})
plt.rcParams['xtick.direction'] = 'in'
plt.rcParams['ytick.direction'] = 'in'
plt.rcParams['axes.xmargin'] = 0

# Types of uniform/characteristic files corresponding to Abaqus results
Types = ['X','Y','XY']
C = {}
complMtx = {}
laminaEff = {}
#Error bar plots
errAHavg = []
errEHavg = []
errBHavg = []
errRPavg = []
errAHmax = []
errEHmax = []
errBHmax = []
errRPmax = []
colors = [(1,0,0,1),(148/255, 0, 211/255, 0.6), (31/255, 119/255, 180/255), (168/255, 159/255, 46/255),(0, 158/255, 115/255)]

foldAngles = np.array([1., 2., 3., 4., 5., 8., 10., 12., 15., 16.,18.,19., 20.,22.,25.,28., 30.,33.,36.,39.,42., 45., 60., 70., 74.,76., 78.,80.])#,81., 83., 85., 86., 87., 88., 89.,1., 2., 3., 4., 5., 8., 10., 12., 15., 16., 20., 24., 26., 28., 30., 34.,38.,42.,45., 55., 60., 62., 65., 67., 70., 74.,80.])##
creaseStiffnesses = np.array([1.98]) #
Kcr = creaseStiffnesses[0]
panelSideLength = 20.0 
gmma = 60.0*np.pi/180
Ebase = 4000.0

#Detailed results
# Kcr=1.98, a=20, converged
thetaDet = np.array([1.,2.,3.,4.,5.,10.,20.,30.,45.,60.,70.,80.])#,85., 86.,87.,88.,89.
elasConstDet = [np.array([-0.6342276980022786, -1.5468529034688925, -2.0454148701112946, -2.3335329020905506, -2.508046723551956, -2.773758427303543, -2.6233901791646854, -2.2441150477299323, -1.4998104358330584, -0.7497096104602758, -0.34912474575430547, -0.08686101182113222])#,-0.023240917499005757, -0.014985280679806832, -0.008497655748666316, -0.0038305130735142305, -0.0009760962627207182
,np.array([969.5871935501566, 228.588926760485, 84.50039593183811, 39.71683537632635, 21.604611528872237, 2.948408283251353, 0.3452623316041892, 0.08653367528836046, 0.01761582680046558, 0.0046396643391157, 0.0020223981077135043, 0.0007728022577246931])#,0.0003867316228727307, 0.0003045677289054229, 0.00022320489615880153, 0.00014409590780064998, 6.841021291708147e-05
,np.array([183.1230376153816, 30.514789709819105, 10.313611808882369, 4.719165576538303, 2.5535547548284123, 0.3656205128560173, 0.05268950182001977, 0.01867994019528767, 0.008958512141058843, 0.010234193840155992, 0.022027567887010137, 0.13549463107283846])#,0.7451228171554933, 1.379575292127227, 3.0114071140443675, 8.718895565730874, 45.65239421179779
,np.array([555.26391825, 264.81105154, 172.15062726, 127.12712363,
        100.59657691,  48.77647996,  23.28856034,  14.55573285,
          8.2829895 ,   4.50426445,   2.72386367,   1.26924479]),#,0.6656790589545679, 0.5390097795911247, 0.41218814224128275, 0.2854054100521752, 0.15777130470883374 Gxy,3by21
np.array([0.64900501, 1.36378663, 1.88304828, 2.21159049, 2.41983845,
       2.75843556, 2.63364055, 2.25758269, 1.51279108, 0.76301088,
       0.36191328, 0.096904  ]),#,0.021563496096699206, 0.013537199549066462, 0.007342330834878025, 0.0029987300481634227, 0.0005405263512869312
np.array([11.06601666, 12.68543912, 11.8521171 , 10.49854532,  9.21539673,
        5.25713613,  2.37405518,  1.23133507,  0.48664768,  0.21364553,
        0.13902115,  0.10579376]),#,0.08399638375722748, 0.08003570517251696, 0.07447706534013473, 0.0652833978264038, 0.04405026602310626
np.array([2.50826914, 1.63206544, 1.30285339, 1.09674115, 0.94833142,
       0.56494983, 0.32106213, 0.24474726, 0.24257573, 0.51085813,
       1.3803552 , 9.10304715]),#,47.41445782956457, 89.38837302929707, 198.85606021864908, 587.4795056022906, 3077.4587524538033
np.array([1.00190642, 0.55070356, 0.37889214, 0.29060217, 0.23378511,
       0.12074641, 0.06430082, 0.04729583, 0.04127837, 0.04732553,
       0.06335303, 0.1194201 ])#,1.043969973315278, 1.2871729778954581, 1.6702583366037247, 2.345900175718783, 3.6461055145270422
]
normElasConstDet = np.zeros((8,len(thetaDet)))
for i in range(8):
    if i in [0,4]:
        normElasConstDet[i] = elasConstDet[i]
    if i in [1,2,3]:
        normElasConstDet[i] = elasConstDet[i]/Ebase #
    if i in [5,6,7]:
        normElasConstDet[i] = elasConstDet[i]/Ebase #

# Rigid panel
alpha = 60.0 *np.pi/180
n = 1000
theta = []
theta0Arr = np.linspace(0,np.pi,num=n+2)
theta0Arr = theta0Arr[1:-1]
for theta0 in theta0Arr:
    xi0 = np.sin(alpha)*np.sin(theta0/2)
    zeta0 = np.cos(alpha)*(1-xi0**2)**(-0.5)
    beta0 = 2*np.arcsin(zeta0*np.sin(theta0/2))
    theta.append((np.pi-beta0)/2)
theta = np.array(theta)
xi0 = np.sin(alpha)*np.sin(theta0Arr/2.0)
zeta0 = np.cos(alpha)*(1-xi0**2)**(-0.5)
beta0 = 2*np.arcsin(zeta0*np.sin(theta0Arr/2.0))
w0 = 2*panelSideLength*xi0
l0 = 2*panelSideLength*zeta0
h0 = panelSideLength*zeta0*np.tan(alpha)*np.cos(theta0Arr/2.0)
V0 = w0*l0*h0
deltaTheta = 2.17e-6
theta1 = theta0Arr + deltaTheta #theta0 after deformation
xi = np.sin(alpha)*np.sin(theta1/2.0)
zeta = np.cos(alpha)*(1-xi**2)**(-0.5)
beta = 2*np.arcsin(zeta*np.sin(theta1/2.0))
h = panelSideLength*zeta*np.tan(alpha)*np.cos(theta1/2.0)
Urig = 2*Kcr*((deltaTheta)**2+(beta-beta0)**2)
w = 2*panelSideLength*xi
epsx = (w-w0)/w0
Zx = 2*Urig/epsx**2/V0
l = 2*panelSideLength*zeta
epsy = (l-l0)/l0
Zy = 2*Urig/epsy**2/V0
Zv = 1/(1-xi0**(-2))
stifRP = [Zv,Zx,Zy]
normStifRP = [Zv,Zx/Ebase,Zy/Ebase]
theta = theta*180/np.pi

# Bar and hinge results
thetaBH = foldAngles
elasConstHBH = np.array([[-3.584751e-01,-1.371496e+00,-2.003788e+00,-2.349294e+00,-2.542379e+00,-2.761904e+00,-2.794777e+00,-2.792062e+00,-2.751144e+00,-2.730752e+00,-2.682216e+00,-2.654559e+00,-2.624887e+00,-2.560060e+00,-2.450759e+00,-2.329105e+00,-2.242151e+00,-2.104330e+00,-1.959244e+00,-1.808676e+00,-1.654406e+00,-1.498211e+00,-7.495901e-01,-3.508019e-01,-2.278520e-01,-1.755231e-01,-1.296426e-01,-9.043478e-02,-7.339426e-02,-4.454405e-02,-2.278219e-02,-1.459397e-02,-8.214962e-03,-3.652953e-03,-9.135172e-04],
                       [1.030647e+03,3.173921e+02,1.288620e+02,6.236071e+01,3.419884e+01,8.955219e+00,4.618986e+00,2.660447e+00,1.335053e+00,1.089954e+00,7.492087e-01,6.293250e-01,5.325772e-01,3.888681e-01,2.524212e-01,1.700283e-01,1.327961e-01,9.348554e-02,6.710553e-02,4.894190e-02,3.617183e-02,2.703852e-02,7.174913e-03,3.169081e-03,2.256040e-03,1.881331e-03,1.547210e-03,1.245304e-03,1.104169e-03,8.375766e-04,5.872069e-04,4.665004e-04,3.479856e-04,2.310959e-04,1.152807e-04],
                       [3.874578e+02,6.240792e+01,1.955540e+01,8.430063e+00,4.366319e+00,1.087366e+00,5.630940e-01,3.299354e-01,1.726723e-01,1.434710e-01,1.026400e-01,8.816117e-02,7.640688e-02,5.877706e-02,4.172774e-02,3.116902e-02,2.628894e-02,2.102907e-02,1.742472e-02,1.491935e-02,1.318344e-02,1.201954e-02,1.274433e-02,2.567308e-02,4.326649e-02,6.073274e-02,9.139624e-02,1.507402e-01,2.024775e-01,4.138322e-01,1.089153e+00,2.065871e+00,4.659486e+00,1.397434e+01,7.064157e+01],
                       [4.876808e+02,2.437661e+02,1.624282e+02,1.217344e+02,9.729834e+01,6.056962e+01,4.827683e+01,4.004822e+01,3.176915e+01,2.968669e+01,2.619886e+01,2.472218e+01,2.338799e+01,2.106928e+01,1.825523e+01,1.600982e+01,1.474423e+01,1.310826e+01,1.171663e+01,1.051226e+01,9.454312e+00,8.512747e+00,4.915123e+00,3.098977e+00,2.441783e+00,2.123397e+00,1.810552e+00,1.502387e+00,1.349810e+00,1.047219e+00,7.475750e-01,5.987891e-01,4.508383e-01,3.043318e-01,1.626167e-01],
                        [4.130209e-01,1.493008e+00,2.108439e+00,2.427182e+00,2.599712e+00,2.787951e+00,2.811889e+00,2.804004e+00,2.758685e+00,2.737325e+00,2.687303e+00,2.659068e+00,2.628903e+00,2.563280e+00,2.453123e+00,2.330877e+00,2.243625e+00,2.105458e+00,1.960114e+00,1.809350e+00,1.654929e+00,1.498617e+00,7.496966e-01,3.508381e-01,2.278733e-01,1.755388e-01,1.296538e-01,9.044233e-02,7.340030e-02,4.454763e-02,2.278399e-02,1.459512e-02,8.215602e-03,3.653237e-03,9.135880e-04],
                        [1.798253e+01,1.766058e+01,1.505403e+01,1.255161e+01,1.057514e+01,6.932044e+00,5.544720e+00,4.571883e+00,3.557183e+00,3.296208e+00,2.854051e+00,2.665054e+00,2.493484e+00,2.193876e+00,1.829392e+00,1.540519e+00,1.380028e+00,1.177263e+00,1.011294e+00,8.746965e-01,7.617995e-01,6.680858e-01,3.751448e-01,2.494431e-01,2.014836e-01,1.772561e-01,1.527516e-01,1.279348e-01,1.154075e-01,9.012797e-02,6.458415e-02,5.173131e-02,3.883635e-02,2.590913e-02,1.296007e-02],
                        [5.868278e+00,3.190205e+00,2.171305e+00,1.642438e+00,1.320503e+00,8.339086e-01,6.718888e-01,5.646126e-01,4.588565e-01,4.328747e-01,3.902911e-01,3.727411e-01,3.572145e-01,3.312140e-01,3.021519e-01,2.822139e-01,2.730431e-01,2.647031e-01,2.625045e-01,2.665706e-01,2.775954e-01,2.969439e-01,6.663989e-01,2.021452e+00,3.866273e+00,5.726514e+00,9.032823e+00,1.550993e+01,2.120323e+01,4.467124e+01,1.205249e+02,2.312493e+02,5.284339e+02,1.618592e+03,8.644319e+03],
                        [3.073887e+00,1.537880e+00,1.026296e+00,7.708179e-01,6.177842e-01,3.891964e-01,3.136571e-01,2.637506e-01,2.145539e-01,2.024402e-01,1.825104e-01,1.742465e-01,1.668931e-01,1.544310e-01,1.400397e-01,1.293989e-01,1.238721e-01,1.174284e-01,1.127966e-01,1.096723e-01,1.078663e-01,1.072750e-01,1.238655e-01,1.668682e-01,2.023909e-01,2.284321e-01,2.636333e-01,3.134543e-01,3.468776e-01,4.428456e-01,6.161637e-01,7.676580e-01,1.018832e+00,1.512946e+00,2.884757e+00]])
normElasConstHBH = np.zeros((8,len(thetaBH)))
for i in range(8):
    if i in [0,4]:
        normElasConstHBH[i] = elasConstHBH[i][0:len(thetaBH)]
    if i in [1,2,3]:
        normElasConstHBH[i] = elasConstHBH[i][0:len(thetaBH)]/Ebase #* panelSideLength**3/Kcr
    if i in [5,6,7]:
        normElasConstHBH[i] = elasConstHBH[i][0:len(thetaBH)]/Ebase #* panelSideLength /Kcr

# Asymptotic
thetaAH = foldAngles #
laminaAH = {'theta30Kcr1_98': {'v21': -0.4389167856401038, 'vb21': 0.43919809819422134, 'vb12': 2.2405561857865965, 'v12': -2.243134774544445, 'M1': 1.2703741400124315, 'T12': 0.043814373063690265, 'M2': 0.24902116261489785, 'E1': 0.09436395490355239, 'G12': 13.717645320914873, 'E2': 0.01846430461360327},'theta28Kcr1_98': {'v21': -0.42142591417925285, 'vb21': 0.4217611755589606, 'vb12': 2.326541582573783, 'v12': -2.329506516800603, 'M1': 1.4350410958264155, 'T12': 0.045987237832120983, 'M2': 0.2601477764612331, 'E1': 0.1214931210421984, 'G12': 14.896282438178645, 'E2': 0.02197905403244752}, 'theta74Kcr1_98': {'v21': -4.34164717891278, 'vb21': 4.337067411892391, 'vb12': 0.22891617911935255, 'v12': -0.22889656445163312, 'M1': 0.0972595495788206, 'T12': 0.09261838933418036, 'M2': 1.8426885534975903, 'E1': 0.0016259680533321315, 'G12': 2.271754557361346, 'E2': 0.03084091554044898}, 'theta19Kcr1_98': {'v21': -0.3621045232255114, 'vb21': 0.36291053765728976, 'vb12': 2.638694719575278, 'v12': -2.6443458787716807, 'M1': 2.4585639871373957, 'T12': 0.059703760990284606, 'M2': 0.3381364171526808, 'E1': 0.44362011796105916, 'G12': 23.01368805059453, 'E2': 0.06074729202299041}, 'theta78Kcr1_98': {'v21': -7.586720142632368, 'vb21': 7.572969090864157, 'vb12': 0.130602461599324, 'v12': -0.13056103942531308, 'M1': 0.06954731769537474, 'T12': 0.12610788958506433, 'M2': 4.032693417949396, 'E1': 0.001099895163055063, 'G12': 1.6848781853009323, 'E2': 0.06391337588199314}, 'theta36Kcr1_98': {'v21': -0.5047663102323758, 'vb21': 0.5049076901367867, 'vb12': 1.9598652812233748, 'v12': -1.961396326513459, 'M1': 0.9022534936837839, 'T12': 0.040368618835929584, 'M2': 0.23244185800840436, 'E1': 0.04799699168274038, 'G12': 10.899649964338062, 'E2': 0.012352049438685767}, 'theta42Kcr1_98': {'v21': -0.5994185710801307, 'vb21': 0.5995059990696698, 'vb12': 1.6558817554912075, 'v12': -1.656841038017336, 'M1': 0.6400403021978632, 'T12': 0.041252302291763625, 'M2': 0.23172427592824024, 'E1': 0.02609284583719596, 'G12': 8.794592922468867, 'E2': 0.009439974027841826}, 'theta18Kcr1_98': {'v21': -0.35683551279693165, 'vb21': 0.3577267357713013, 'vb12': 2.6638564372294815, 'v12': -2.6698656944705754, 'M1': 2.6159755782710676, 'T12': 0.06253329343651105, 'M2': 0.3512968609695896, 'E1': 0.5256897833049989, 'G12': 24.391266718857405, 'E2': 0.0702600073802381}, 'theta33Kcr1_98': {'v21': -0.4689305712091871, 'vb21': 0.46910930524430655, 'vb12': 2.10399941662069, 'v12': -2.1061357591860266, 'M1': 1.085722089401544, 'T12': 0.04226026224209543, 'M2': 0.24207342027955323, 'E1': 0.06698934720459035, 'G12': 12.194966338798828, 'E2': 0.014915160484108422}, 'theta2Kcr1_98': {'v21': -0.1765499575304707, 'vb21': 0.17201732804154746, 'vb12': 1.2404182601369171, 'v12': -1.3138471593432361, 'M1': 11.410571347985853, 'T12': 0.4815103082772365, 'M2': 1.5823823768051508, 'E1': 236.10089945779393, 'G12': 237.7005754066684, 'E2': 31.726372033270742}, 'theta12Kcr1_98': {'v21': -0.3263719310440807, 'vb21': 0.32798177987881555, 'vb12': 2.7425586877510235, 'v12': -2.7517139587774317, 'M1': 4.079642359339988, 'T12': 0.08896279498862626, 'M2': 0.48788321951373714, 'E1': 1.851199668170081, 'G12': 37.33422847213648, 'E2': 0.21956483104706992}, 'theta76Kcr1_98': {'v21': -5.623962244705968, 'vb21': 5.616528481495638, 'vb12': 0.1764946302236384, 'v12': -0.17647704255458713, 'M1': 0.08325409094233883, 'T12': 0.10041192645163463, 'M2': 2.6493665693181367, 'E1': 0.0013446245605166626, 'G12': 1.9756730002002127, 'E2': 0.04285043341720206}, 'theta5Kcr1_98': {'v21': -0.26468598151335876, 'vb21': 0.26634277704967907, 'vb12': 2.3658098079231653, 'v12': -2.392242054910055, 'M1': 8.475679711065148, 'T12': 0.20261536671940508, 'M2': 0.954191695405309, 'E1': 23.274935444118782, 'G12': 91.46925039288084, 'E2': 2.575219811073119}, 'theta15Kcr1_98': {'v21': -0.34163807165035115, 'vb21': 0.3427950443243611, 'vb12': 2.7220368901902403, 'v12': -2.7290177844595047, 'M1': 3.2334146299558277, 'T12': 0.0723302096752036, 'M2': 0.40719452237742476, 'E1': 0.936518868751194, 'G12': 29.589600355799806, 'E2': 0.1172401668491486}, 'theta10Kcr1_98': {'v21': -0.31459560182983265, 'vb21': 0.3164625982858527, 'vb12': 2.7261675566684263, 'v12': -2.7371469451609025, 'M1': 4.886182014817612, 'T12': 0.10489474089257068, 'M2': 0.5672042616472434, 'E1': 3.2066989081757544, 'G12': 45.042265192636044, 'E2': 0.3685638342099737}, 'theta45Kcr1_98': {'v21': -0.662476413144883, 'vb21': 0.6623992172718626, 'vb12': 1.4996734200736646, 'v12': -1.5006254100582268, 'M1': 0.5710517306894265, 'T12': 0.0413463308409307, 'M2': 0.25223106202138207, 'E1': 0.019686886856309156, 'G12': 7.918575720257192, 'E2': 0.008691108455940896}, 'theta80Kcr1_98': {'v21': -10.816305215881911, 'vb21': 10.789595355780323, 'vb12': 0.09133829135697938, 'v12': -0.09128576016922954, 'M1': 0.05624857624418917, 'T12': 0.15238730102725423, 'M2': 6.644522992461083, 'E1': 0.0008760002541811525, 'G12': 1.3983875355108177, 'E2': 0.10379588339789414}, 'theta39Kcr1_98': {'v21': -0.5476786969914884, 'vb21': 0.5477676979163981, 'vb12': 1.8098031893803146, 'v12': -1.8110174484795103, 'M1': 0.7594118229707575, 'T12': 0.03945643754360317, 'M2': 0.2298488965430662, 'E1': 0.03494745271725825, 'G12': 9.778846490548073, 'E2': 0.010568631121378284}, 'theta8Kcr1_98': {'v21': -0.29989856512360397, 'vb21': 0.30193427237150505, 'vb12': 2.6617287249375834, 'v12': -2.676656464471848, 'M1': 6.002222433759774, 'T12': 0.12957381833476192, 'M2': 0.6808645246865562, 'E1': 6.1991811980777145, 'G12': 56.600325935717436, 'E2': 0.6945700992718052}, 'theta60Kcr1_98': {'v21': -1.3260827277704061, 'vb21': 1.3258893304757697, 'vb12': 0.7508437279636869, 'v12': -0.7512140767479609, 'M1': 0.24459605119364414, 'T12': 0.0495332003707914, 'M2': 0.43192382446037086, 'E1': 0.005322638342164965, 'G12': 4.571975696706454, 'E2': 0.009395802062534538}, 'theta70Kcr1_98': {'v21': -2.827766288971254, 'vb21': 2.8258849795917804, 'vb12': 0.3519074197334113, 'v12': -0.3519509423718518, 'M1': 0.13059217700307096, 'T12': 0.07169906673524115, 'M2': 1.0486805641231884, 'E1': 0.002312630314565911, 'G12': 2.882859276097437, 'E2': 0.01858093630410885}, 'theta3Kcr1_98': {'v21': -0.21754575582205446, 'vb21': 0.2161675708815982, 'vb12': 1.7953407003840638, 'v12': -1.8474104468776016, 'M1': 10.796853981448175, 'T12': 0.3303208583197241, 'M2': 1.2999926408584643, 'E1': 89.14916787182554, 'G12': 154.92899793008223, 'E2': 10.497950327368931}, 'theta4Kcr1_98': {'v21': -0.2448451452822022, 'vb21': 0.2455550431360445, 'vb12': 2.1439600116746447, 'v12': -2.179419104292301, 'M1': 9.627314194630575, 'T12': 0.25145934760819316, 'M2': 1.102649088356932, 'E1': 42.48447621802777, 'G12': 115.0464509433322, 'E2': 4.772885458953083}, 'theta22Kcr1_98': {'v21': -0.3791662997580831, 'vb21': 0.37976356159728464, 'vb12': 2.5506234879866887, 'v12': -2.554911445747872, 'M1': 2.030212888238343, 'T12': 0.053452076613474696, 'M2': 0.30227937634444263, 'E1': 0.27500640243750585, 'G12': 19.609141780110463, 'E2': 0.04081282746435408}, 'theta20Kcr1_98': {'v21': -0.36762954051718577, 'vb21': 0.3683237488897773, 'vb12': 2.611169536351189, 'v12': -2.616191765944173, 'M1': 2.304949014170126, 'T12': 0.057824240307302203, 'M2': 0.32512919980112526, 'E1': 0.3755625450135618, 'G12': 21.770286732776842, 'E2': 0.052774375202947886}, 'theta25Kcr1_98': {'v21': -0.39886932637089056, 'vb21': 0.39934853471177023, 'vb12': 2.444479496628352, 'v12': -2.448197252666378, 'M1': 1.6875800219040777, 'T12': 0.04886272385276831, 'M2': 0.27569575031649873, 'E1': 0.17806405555409527, 'G12': 16.98716601802149, 'E2': 0.029010852704934986}, 'theta16Kcr1_98': {'v21': -0.3466083082992823, 'vb21': 0.34766331919229115, 'vb12': 2.7062530755512726, 'v12': -2.7129458654058687, 'M1': 3.004242405954682, 'T12': 0.06882986883949274, 'M2': 0.38594501598845427, 'E1': 0.7639719308682831, 'G12': 27.645697030149396, 'E2': 0.09760571411430533}, 'theta1Kcr1_98': {'v21': -0.09672460481686497, 'vb21': 0.10256010654646805, 'vb12': 0.4612375666345707, 'v12': -0.4584175521546517, 'M1': 9.584781188311231, 'T12': 0.8970200085983211, 'M2': 2.13125783979475, 'E1': 983.3925393989678, 'G12': 510.12746008552045, 'E2': 207.49261084385654}}

# Energy equivalence (Periodic BC)
laminaPBC = {'theta10Kcr1_98': {'v21': -0.31065227420577585, 'vb21': 0.3140204472381035, 'vb12': 2.7254723628590933, 'v12': -2.744660038646712, 'M1': 4.855281953392917, 'T12': 0.10407705937952255, 'M2': 0.5594104828390664, 'E1': 3.176373645877798, 'G12': 44.823119167971704, 'E2': 0.3595154528885688}, 'theta76Kcr1_98': {'v21': -5.608255366212794, 'vb21': 5.599707573015735, 'vb12': 0.17693662296056764, 'v12': -0.1768324138868274, 'M1': 0.07999191159574673, 'T12': 0.0760249702557784, 'M2': 2.531591852764901, 'E1': 0.0013290898328920087, 'G12': 1.965630851839262, 'E2': 0.04215219949587944}, 'theta80Kcr1_98': {'v21': -10.779455467590598, 'vb21': 10.755037821340938, 'vb12': 0.09153937936914469, 'v12': -0.09148318908342593, 'M1': 0.0548266203377747, 'T12': 0.10394060693747775, 'M2': 6.441625226353954, 'E1': 0.0008673917923026158, 'G12': 1.391166905248171, 'E2': 0.1022046923785431}, 'theta60Kcr1_98': {'v21': -1.3244509995194742, 'vb21': 1.3242221964030512, 'vb12': 0.7517666913198393, 'v12': -0.7517893453556064, 'M1': 0.21801628064335968, 'T12': 0.04128394334243223, 'M2': 0.38403137747206395, 'E1': 0.005120350558591478, 'G12': 4.549172791679484, 'E2': 0.009020683063829226}, 'theta30Kcr1_98': {'v21': -0.43749216547095626, 'vb21': 0.4382587176171124, 'vb12': 2.242652890426032, 'v12': -2.244969542422516, 'M1': 1.2135310602310276, 'T12': 0.04140493314554903, 'M2': 0.23714796369774027, 'E1': 0.0935718126988337, 'G12': 13.65157439076372, 'E2': 0.018234962297297354}, 'theta86Kcr1_98': {'v21': -55.24263868281508, 'vb21': 49.48783171918089, 'vb12': 0.014685713852981808, 'v12': -0.014637813767106846, 'M1': 0.1027163172420988, 'T12': 0.6938634477473855, 'M2': 346.1328385789622, 'E1': 0.0011145984711654244, 'G12': 0.5592151556034665, 'E2': 4.206458805847997}, 'theta78Kcr1_98': {'v21': -7.563104084401643, 'vb21': 7.547905146868712, 'vb12': 0.13094741269374285, 'v12': -0.1308471344835979, 'M1': 0.06742003857235335, 'T12': 0.08769782877649028, 'M2': 3.88614059395363, 'E1': 0.001087932515545582, 'G12': 1.6762640855414113, 'E2': 0.06288366103200807}, 'theta83Kcr1_98': {'v21': -21.160606482878904, 'vb21': 20.885602495062646, 'vb12': 0.04500531961398992, 'v12': -0.04491708428471257, 'M1': 0.08392406165452639, 'T12': 0.15080851049617505, 'M2': 38.94660912357363, 'E1': 0.0011883897144731213, 'G12': 0.9700309042923958, 'E2': 0.5598548413532106}, 'theta39Kcr1_98': {'v21': -0.5464619416065356, 'vb21': 0.5468967965641142, 'vb12': 1.811560215448015, 'v12': -1.8125539131773263, 'M1': 0.7191346951117862, 'T12': 0.03666244209257927, 'M2': 0.21710151155946095, 'E1': 0.03473950875292123, 'G12': 9.731528170828534, 'E2': 0.01047351985812151}, 'theta16Kcr1_98': {'v21': -0.34373750541501924, 'vb21': 0.3457429066096966, 'vb12': 2.7079790791506735, 'v12': -2.7168224272568096, 'M1': 2.973174610581174, 'T12': 0.06769741276670087, 'M2': 0.3796019103821488, 'E1': 0.7591072974094338, 'G12': 27.51479378582278, 'E2': 0.09604368917747858}, 'theta87Kcr1_98': {'v21': -91.87554506934967, 'vb21': 85.04713027215934, 'vb12': 0.008385961211914357, 'v12': -0.008348677019165866, 'M1': 0.0509825308426775, 'T12': 0.6780119005049953, 'M2': 517.0448363177873, 'E1': 0.0006584979797856319, 'G12': 0.4229118418751106, 'E2': 7.246640477405258}, 'theta70Kcr1_98': {'v21': -2.822388707307631, 'vb21': 2.820190213668063, 'vb12': 0.35253382556172796, 'v12': -0.35243202446701355, 'M1': 0.12222630243595102, 'T12': 0.05568392961297725, 'M2': 0.9777825473440858, 'E1': 0.0022591931624341, 'G12': 2.8684381885498214, 'E2': 0.01809234356305614}, 'theta20Kcr1_98': {'v21': -0.36525547375375894, 'vb21': 0.3667309198692413, 'vb12': 2.614420870264426, 'v12': -2.620151542986808, 'M1': 2.2529872550365, 'T12': 0.055725413519954796, 'M2': 0.31603178275181293, 'E1': 0.372575137665808, 'G12': 21.66554358198372, 'E2': 0.051937876945036626}, 'theta74Kcr1_98': {'v21': -4.331643566859061, 'vb21': 4.326448511395943, 'vb12': 0.22937518839002227, 'v12': -0.22927095419350246, 'M1': 0.09325059958007109, 'T12': 0.06741194382890706, 'M2': 1.7588821204757974, 'E1': 0.0015975862408721456, 'G12': 2.2602336995785643, 'E2': 0.03018338797916729}, 'theta4Kcr1_98': {'v21': -0.24052213249461085, 'vb21': 0.24372641219049732, 'vb12': 2.136065447485171, 'v12': -2.1996671202934728, 'M1': 9.546725229106759, 'T12': 0.2508546121877353, 'M2': 1.0892873582118308, 'E1': 42.10007282738844, 'G12': 114.52825242338731, 'E2': 4.603423491310315}, 'theta28Kcr1_98': {'v21': -0.4199509162126402, 'vb21': 0.42082364417297563, 'vb12': 2.3287336495305535, 'v12': -2.331493623792543, 'M1': 1.364949315474686, 'T12': 0.043198745333438336, 'M2': 0.24665892776756979, 'E1': 0.11958349563507506, 'G12': 14.824154996129419, 'E2': 0.021539496416966626}, 'theta36Kcr1_98': {'v21': -0.5035680027228876, 'vb21': 0.5041243900222316, 'vb12': 1.9615128773784207, 'v12': -1.962906247518891, 'M1': 0.8523416319421067, 'T12': 0.03768578954608227, 'M2': 0.2190585696626409, 'E1': 0.047482037861327084, 'G12': 10.846746054616624, 'E2': 0.012181139573662141}, 'theta1Kcr1_98': {'v21': -0.09597551391992772, 'vb21': 0.10098094436506448, 'vb12': 0.4499068820309581, 'v12': -0.47271536403298803, 'M1': 9.475491877163456, 'T12': 0.8903342338176021, 'M2': 2.1267603504087385, 'E1': 984.358762562945, 'G12': 507.0402068537406, 'E2': 199.8545960354483}, 'theta42Kcr1_98': {'v21': -0.598284076569931, 'vb21': 0.5986568169922747, 'vb12': 1.6574007207235832, 'v12': -1.6581694513956984, 'M1': 0.6042037326057629, 'T12': 0.03599622246861448, 'M2': 0.21823972854235443, 'E1': 0.025724296575082392, 'G12': 8.75176689271219, 'E2': 0.00928158277724868}, 'theta85Kcr1_98': {'v21': -40.288268678287935, 'vb21': 39.69242192889003, 'vb12': 0.023248398691356576, 'v12': -0.023185234448183708, 'M1': 0.04367984250265862, 'T12': 0.20674701920790742, 'M2': 74.57540458679316, 'E1': 0.0006309728015198929, 'G12': 0.6936370455963504, 'E2': 1.0964220272664489}, 'theta15Kcr1_98': {'v21': -0.3385313725657863, 'vb21': 0.34073767020973295, 'vb12': 2.7241631505439945, 'v12': -2.733993532497331, 'M1': 3.1957352661403413, 'T12': 0.07172066757217004, 'M2': 0.39972179675593017, 'E1': 0.9279587002843369, 'G12': 29.450385956023002, 'E2': 0.11490266116491862}, 'theta8Kcr1_98': {'v21': -0.29576998463712156, 'vb21': 0.29961735726726285, 'vb12': 2.658584591324595, 'v12': -2.6853975417393556, 'M1': 5.938920260829837, 'T12': 0.1292293088275995, 'M2': 0.669304862210264, 'E1': 6.115453773185869, 'G12': 56.339988733863805, 'E2': 0.6735567603791939}, 'theta33Kcr1_98': {'v21': -0.4676143191453416, 'vb21': 0.4682469351289415, 'vb12': 2.106280888010922, 'v12': -2.1080391314640585, 'M1': 1.0193808860827873, 'T12': 0.039267459705951774, 'M2': 0.22661838615838722, 'E1': 0.06613750796281426, 'G12': 12.135960274408706, 'E2': 0.014670906860501175}, 'theta81Kcr1_98': {'v21': -13.22418573617697, 'vb21': 13.185542972402327, 'vb12': 0.07445336292626005, 'v12': -0.07438464603822172, 'M1': 0.048994212110032874, 'T12': 0.11486797780895978, 'M2': 8.676777834946934, 'E1': 0.0007664198879383725, 'G12': 1.2500921492624295, 'E2': 0.13625498661093416}, 'theta3Kcr1_98': {'v21': -0.21338658167667532, 'vb21': 0.2147438122051031, 'vb12': 1.7860517557782012, 'v12': -1.8708084892521464, 'M1': 10.70247979425976, 'T12': 0.32914627345825614, 'M2': 1.2867999505792813, 'E1': 88.5848543853344, 'G12': 154.27888419706497, 'E2': 10.104091024928442}, 'theta22Kcr1_98': {'v21': -0.37710287274903137, 'vb21': 0.37838398646319726, 'vb12': 2.5532168659600467, 'v12': -2.558034367077559, 'M1': 1.9813556689966902, 'T12': 0.05158103289367202, 'M2': 0.29363477369734503, 'E1': 0.27269546132340416, 'G12': 19.514402882231238, 'E2': 0.040200492680699064}, 'theta12Kcr1_98': {'v21': -0.32275181986277107, 'vb21': 0.325544211794375, 'vb12': 2.744296465493374, 'v12': -2.7587576635937703, 'M1': 4.060973737028982, 'T12': 0.08786237637550853, 'M2': 0.4817360336107422, 'E1': 1.8365454767522775, 'G12': 37.15467212394834, 'E2': 0.21486062465899178}, 'theta88Kcr1_98': {'v21': -121.42454991147733, 'vb21': 125.94295854266835, 'vb12': 0.003642278508428248, 'v12': -0.00352748445040896, 'M1': 0.04591738443285707, 'T12': 1.2670471664544605, 'M2': 1587.7344993342115, 'E1': 0.0008597623018864204, 'G12': 0.2954190329556451, 'E2': 29.59509871838306}, 'theta19Kcr1_98': {'v21': -0.3596210878333598, 'vb21': 0.3612691470728302, 'vb12': 2.641675232261127, 'v12': -2.647968848620929, 'M1': 2.401290767306701, 'T12': 0.058500835091304444, 'M2': 0.328394746176354, 'E1': 0.43982466657044766, 'G12': 22.905579478277378, 'E2': 0.05973266080164981}, 'theta2Kcr1_98': {'v21': -0.1732215449076255, 'vb21': 0.1710047358135664, 'vb12': 1.2302174298254218, 'v12': -1.3383598459536374, 'M1': 11.313922696289827, 'T12': 0.47832481454023806, 'M2': 1.5726767600494085, 'E1': 235.41062394892654, 'G12': 236.56609998980304, 'E2': 30.468780194944472}, 'theta45Kcr1_98': {'v21': -0.6613947293606149, 'vb21': 0.6616867401657899, 'vb12': 1.5012105526075326, 'v12': -1.501742711018126, 'M1': 0.5076614263415173, 'T12': 0.03585050131872128, 'M2': 0.22376130631400698, 'E1': 0.019239360323774723, 'G12': 7.87996145306096, 'E2': 0.00847336326059967}, 'theta5Kcr1_98': {'v21': -0.2601094981054757, 'vb21': 0.2640086097666593, 'vb12': 2.357555744336327, 'v12': -2.406776117289654, 'M1': 8.419690802774245, 'T12': 0.2026413833869304, 'M2': 0.9428709666126319, 'E1': 23.046079694426957, 'G12': 91.07969051849868, 'E2': 2.4906779569371786}, 'theta89Kcr1_98': {'v21': -70.74546421885047, 'vb21': 217.7020702258095, 'vb12': 0.0008466932360408211, 'v12': -0.0007083405112676491, 'M1': 0.020846235808976325, 'T12': 2.4635593735914516, 'M2': 5359.991669770178, 'E1': 0.0011972909870472906, 'G12': 0.18825905020831044, 'E2': 119.57936237773673}, 'theta25Kcr1_98': {'v21': -0.39693896685017654, 'vb21': 0.3979997339118219, 'vb12': 2.4477626482229113, 'v12': -2.4514083580504087, 'M1': 1.640498415487021, 'T12': 0.046843953915243264, 'M2': 0.2667407043410119, 'E1': 0.1774527356167602, 'G12': 16.90569025002569, 'E2': 0.02873364827575002}, 'theta18Kcr1_98': {'v21': -0.35424961932109433, 'vb21': 0.355992834360409, 'vb12': 2.6663888770821225, 'v12': -2.6734434529205933, 'M1': 2.5732203051211684, 'T12': 0.0609089582464711, 'M2': 0.3435537845688469, 'E1': 0.5224801082953512, 'G12': 24.274662673048407, 'E2': 0.0692322028596764}}

elasConsts = ['v12','E1','E2','G12','vb12','M1','M2','T12']
categories = [r"$\nu_{12}$", r"$E_1/E_\mathrm{base}$", r"$E_2/E_\mathrm{base}$",r'$G_{12}/E_\mathrm{base}$',r'$\nu^b_{12}$', r'$M_1/E_\mathrm{base} \mathrm{(mm^2)}$',r'$M_2/E_\mathrm{base} \mathrm{(mm^2)}$',r'$T_{12}/E_\mathrm{base} \mathrm{(mm^2)}$']
categories2 = [r'$\nu_{12}$', r'$E_1$', r'$E_2$',r'$G_{12}$',r'$\nu^b_{12}$', r'$M_1$', r'$M_2$',r'$T_{12}$']
plotlabel = ['(a)','(b)','(c)','(d)','(e)','(f)','(g)','(h)']
markers = ['*','^','D','o']
pltylim = [[-3,0],[0,0.000175],[0,0.000125],[0,0.15],[0,3],[0,0.005],[0,0.004],[0,8e-4]]#[[-3,0],[0,0.7],[0,0.5],[0,100],[0,3],[0,20],[0,10],[0,2.5]]
inslim = [[0,20,-3,-2.5],[25,35,0.1e-4,0.4e-4],[10,30,0,0.3e-4],[0,20,0,0.03],[0,20,2,3],[0,5,2e-3,4e-3],[60,80,0,1e-3],[0,10,0,2e-4]]
fig, subplotAxes = plt.subplots(4, 2, figsize=(7, 8), sharex=True)
subplotAxes = subplotAxes.flatten()
for i in np.arange(0,8):
    EijPBC = np.zeros((len(foldAngles),len(creaseStiffnesses)))
    EijAH = np.zeros((len(thetaAH),len(creaseStiffnesses)))
    for f in range(len(foldAngles)):
        angle = foldAngles[f]
        for cs in range(len(creaseStiffnesses)):
            Kcr = creaseStiffnesses[cs]
            modelName = 'theta'+str(int(angle))+'Kcr'+str(Kcr).replace(".","_")
            EijPBC[f][cs] = laminaPBC[modelName][elasConsts[i]]
            if elasConsts[i] in ['v12','vb12']:
                normEijPBC = EijPBC
            if elasConsts[i] in ['E1','E2','G12']:
                normEijPBC = EijPBC/Ebase #
            if elasConsts[i] in ['M1','M2','T12']:
                normEijPBC = EijPBC/Ebase #
    for f,angle in enumerate(thetaAH):
        for cs,Kcr in enumerate(creaseStiffnesses):
            modelName = 'theta'+str(int(angle))+'Kcr'+str(Kcr).replace(".","_")
            EijAH[f][cs] = laminaAH[modelName][elasConsts[i]]
            if elasConsts[i] in ['v12','vb12']:
                normEijAH = EijAH
            if elasConsts[i] in ['E1','E2','G12']:
                normEijAH = EijAH/Ebase #
            if elasConsts[i] in ['M1','M2','T12']:
                normEijAH = EijAH/Ebase #
    ax1 = subplotAxes[i]
    ax1.set_ylabel(categories[i])
    if i in [6,7]:
        ax1.set_xlabel(r'Initial fold angle $\theta_0$'+' (deg)')
    ax1.set_ylim(pltylim[i])#
    ax1.set_xlim([0,80])
    ax1.annotate(
            plotlabel[i],
            xy=(0.5, 1), xycoords='axes fraction',
            xytext=(-0.5, -1.5), textcoords='offset fontsize',
            fontsize='medium', verticalalignment='bottom', fontfamily='serif',
            bbox=dict(facecolor='1.0', edgecolor='none', pad=3.0))
    ax1.plot(thetaAH,normEijAH,label='Asymptotic plate FE',color=colors[0],marker=markers[0],markevery=[4,12,20])
    ax1.plot(foldAngles,normEijPBC[:,0],label='Energy-based plate FE',color=colors[1],marker=markers[1],markevery=[5,13,21])
    ax1.scatter(thetaDet,normElasConstDet[i],label='Detailed plate FE',color=colors[2],s=30,zorder=1)
    ax1.plot(thetaBH,normElasConstHBH[i],label='Homogenized/detailed bar-and-hinge',color=colors[3],marker=markers[2],markevery=0.3,markersize=4.5)
    if i in [0,1,2]:
        ax1.plot(theta,normStifRP[i],label='Rigid panel',color=colors[4],linestyle='dashed')
    if i == 0:
        ax1.legend(fontsize=12, loc='upper left', bbox_to_anchor=(2.5, 0.97))
    ax1.ticklabel_format(style='sci', axis='y', scilimits=(-3,2))

    # Insets
    if i in [0,6]:
        axins = inset_axes(ax1, width="40%", height="45%",loc='upper left')
    else:
        axins = inset_axes(ax1, width="40%", height="60%")
    axins.plot(thetaAH,normEijAH,label='Asymptotic plate FE',color=colors[0],marker=markers[0],markevery=[2,11,16,25])
    axins.plot(foldAngles,normEijPBC[:,0],label='Energy-based plate FE',color=colors[1],marker=markers[1],markevery=[3,13,15,26])
    axins.scatter(thetaDet,normElasConstDet[i],label='Detailed plate FE',color=colors[2],s=30,zorder=1)
    axins.plot(thetaBH,normElasConstHBH[i],label='Homogenized/detailed bar-and-hinge',color=colors[3],marker=markers[2],markevery=0.3,markersize=4.5)
    if i in [0,1,2]:
        axins.plot(theta,normStifRP[i],label='Rigid panel',color=colors[4],linestyle='dashed')
    axins.set_xlim(inslim[i][0], inslim[i][1])
    axins.set_ylim(inslim[i][2], inslim[i][3])
    for spine in axins.spines.values():
        spine.set_color("grey")
        spine.set_linestyle("--")
        spine.set_linewidth(0.5)
    axins.tick_params(labelleft=False, labelbottom=False)
    ax1.add_patch(plt.Rectangle((inslim[i][0], inslim[i][2]), inslim[i][1]-inslim[i][0], inslim[i][3]-inslim[i][2], ls="--", lw=1, ec="0.5", fc="none"))
plt.tight_layout()
plt.subplots_adjust(wspace=0.25,hspace=0.15)
plt.savefig("modelingMethodsAllConsts.pdf", format="pdf", bbox_inches="tight")
plt.show()

##
# Error plots
##
elasConsts = ['v12','E1','E2','G12','vb12','M1','M2','T12']
categories = [r"Poisson's ratio $\nu_{12}$", r"Young's modulus $E_1$ (MPa)", r"Young's modulus $E_2$ (MPa)",r'Shear modulus $G_{12}$ (MPa)','Bending Poisson\'s \n ratio '+r'$\nu^b_{12}$', 'Bending modulus '+r'$M_1$'+' (N)', 'Bending modulus '+r'$M_2$'+' (N)','Twisting modulus \n'+r'$T_{12}$'+' (N)']
categories2 = [r'$\nu_{12}$', r'$E_1$', r'$E_2$',r'$G_{12}$',r'$\nu^b_{12}$', r'$M_1$', r'$M_2$',r'$T_{12}$']
plotlabel = ['(a)','(b)','(c)','(d)','(e)','(f)','(g)','(h)']
pltylim = [[0,100],[0,100],[0,100],[0,100],[0,100],[0,100],[0,100],[0,200]]
fig, subplotAxes = plt.subplots(4, 2, figsize=(7, 8.5), sharex=True)
subplotAxes = subplotAxes.flatten()
for i in np.arange(0,8):
    EijPBC = np.zeros((len(foldAngles),len(creaseStiffnesses)))
    EijAH = np.zeros((len(thetaAH),len(creaseStiffnesses)))
    for f in range(len(foldAngles)):
        angle = foldAngles[f]
        for cs in range(len(creaseStiffnesses)):
            Kcr = creaseStiffnesses[cs]
            modelName = 'theta'+str(int(angle))+'Kcr'+str(Kcr).replace(".","_")
            EijPBC[f][cs] = laminaPBC[modelName][elasConsts[i]]
    for f,angle in enumerate(thetaAH):
        for cs,Kcr in enumerate(creaseStiffnesses):
            modelName = 'theta'+str(int(angle))+'Kcr'+str(Kcr).replace(".","_")
            EijAH[f][cs] = laminaAH[modelName][elasConsts[i]]
    normEijPBC = EijPBC
    ax1 = subplotAxes[i]
    ax1.set_ylabel("Error of "+categories2[i]+" (\%)")
    if i in [6,7]:
        ax1.set_xlabel(r'Initial fold angle $\theta_0$'+' (deg)')
    ax1.set_ylim(pltylim[i])
    ax1.set_xlim([0,80])
    ax1.annotate(
            plotlabel[i],
            xy=(0.5, 1), xycoords='axes fraction',
            xytext=(-0.5, -1.5), textcoords='offset fontsize',
            fontsize='medium', verticalalignment='bottom', fontfamily='serif',
            bbox=dict(facecolor='1.0', edgecolor='none', pad=3.0))
    interpolator = interp1d(foldAngles,normEijPBC[:,0], kind='linear', fill_value="extrapolate")
    y1_interp = interpolator(thetaDet)
    percent_errorEner = np.abs((y1_interp - elasConstDet[i]) / elasConstDet[i]) * 100
    interpolator = interp1d(foldAngles,EijAH[:,0], kind='linear', fill_value="extrapolate")
    y1_interp = interpolator(thetaDet)
    percent_errorAH = np.abs((y1_interp - elasConstDet[i]) / elasConstDet[i]) * 100
    interpolator = interp1d(thetaBH,elasConstHBH[i][0:len(thetaBH)], kind='linear', fill_value="extrapolate")
    y1_interp = interpolator(thetaDet)
    percent_errorHBH = np.abs((y1_interp - elasConstDet[i]) / elasConstDet[i]) * 100
    if i in [0,1,2]:
        interpolator = interp1d(theta,stifRP[i], kind='linear', fill_value="extrapolate")
        y1_interp = interpolator(thetaDet)
        percent_errorRigid = np.abs((y1_interp - elasConstDet[i]) / elasConstDet[i]) * 100
    ax1.plot(thetaDet, percent_errorAH,label='Asymptotic plate FE',color=colors[0],marker=markers[0])
    ax1.plot(thetaDet, percent_errorEner, label='Energy-based plate FE',color=colors[1],marker=markers[1])
    ax1.plot(thetaDet, percent_errorHBH, label='Homogenized bar-and-hinge',color=colors[3],marker=markers[2],markersize=4.5)
    if i in [0,1,2]:
        ax1.plot(thetaDet[1:], percent_errorRigid[1:],color=colors[4], label='Rigid panel',linestyle='dashed')
    if i == 0:
        ax1.legend(fontsize=12,loc='upper left', bbox_to_anchor=(2.5, 0.97))
    
    #Averaged error
    errAHavg.append(np.sqrt(np.trapz(percent_errorAH**2,thetaDet)/80))
    errEHavg.append(np.sqrt(np.trapz(percent_errorEner**2,thetaDet)/80))
    errBHavg.append(np.sqrt(np.trapz(percent_errorHBH**2,thetaDet)/80))
    if i in [0,1,2]:
        errRPavg.append(np.sqrt(np.trapz(percent_errorRigid**2,thetaDet)/80))
    else:
        errRPavg.append(0)
    # Maximum error
    errAHmax.append(np.max(percent_errorAH))
    errEHmax.append(np.max(percent_errorEner))
    errBHmax.append(np.max(percent_errorHBH))
    if i in [0,1,2]:
        errRPmax.append(np.max(percent_errorRigid))
    else:
        errRPmax.append(0)

plt.tight_layout()
plt.subplots_adjust(wspace=0.25,hspace=0.1)
plt.savefig("errConstsPlots.pdf", format="pdf", bbox_inches="tight")
plt.show()

# Error bar plots
categories = [r'$\nu_{12}$', r'$E_1$', r'$E_2$',r'$G_{12}$',r'$\nu^b_{12}$', r'$M_1$', r'$M_2$',r'$T_{12}$']
bar_width = 0.2   
x = np.arange(len(categories))  
x2 = x + bar_width  
x3 = x + 2 * bar_width  
x4 = x + 3 * bar_width  
fig, subplotAxes = plt.subplots(1,2, figsize=(12,3))
subplotAxes = subplotAxes.flatten()
ax1 = subplotAxes[0]
ax1.bar(x, errAHavg, width=bar_width, label='Asymptotic plate FE',color=colors[0])
ax1.bar(x2, errEHavg, width=bar_width, label='Energy-based plate FE',color=colors[1])
ax1.bar(x3, errBHavg, width=bar_width, label='Homogenized/detailed bar-and-hinge',color=colors[3])
ax1.bar(x4, errRPavg, width=bar_width, label='Rigid panel',color=colors[4])
ax1.set_ylabel("Averaged error (\%)")
ax1.set_xticks(x + bar_width, categories)
ax1.annotate('(a)',xy=(0.5, 1), xycoords='axes fraction',
        xytext=(-0.5, -1.5), textcoords='offset fontsize',
        fontsize='medium', verticalalignment='bottom', fontfamily='serif',
        bbox=dict(facecolor='1.0', edgecolor='none', pad=3.0))
ax2 = subplotAxes[1]
ax2.bar(x, errAHmax, width=bar_width, label='Asymptotic plate FE',color=colors[0])
ax2.bar(x2, errEHmax, width=bar_width, label='Energy-based plate FE',color=colors[1])
ax2.bar(x3, errBHmax, width=bar_width, label='Homogenized/detailed bar-and-hinge',color=colors[3])
ax2.bar(x4, errRPmax, width=bar_width, label='Rigid panel',color=colors[4])
ax2.set_ylabel("Maximum error (\%)")
ax2.set_xticks(x + bar_width, categories)
ax2.annotate('(b)',xy=(0.5, 1), xycoords='axes fraction',
        xytext=(-0.5, -1.5), textcoords='offset fontsize',
        fontsize='medium', verticalalignment='bottom', fontfamily='serif',
        bbox=dict(facecolor='1.0', edgecolor='none', pad=3.0))
ax2.legend(fontsize=12,loc='upper left', bbox_to_anchor=(1, 0.97))
plt.tight_layout()
plt.subplots_adjust(wspace=0.2,hspace=0.05)
plt.savefig("errBar.pdf", format="pdf", bbox_inches="tight")
plt.show()
# -*- coding: utf-8 -*-
"""
Created on Fri Aug  8 12:19:46 2025

@author: xli2
"""

import numpy as np
import matplotlib.pyplot as plt

plt.rcParams.update({
    'font.size': 12,
    "text.usetex": True,
    "font.family": "serif",  # or 'sans-serif' or 'monospace'
    "font.serif": ["Times New Roman"],  # Default LaTeX serif font
})
plt.rcParams['xtick.direction'] = 'in'
plt.rcParams['ytick.direction'] = 'in'
plt.rcParams['axes.xmargin'] = 0

#Error bar plots
errAHavg = []
errEHavg = []
errBHavg = []
errRPavg = []
errAHmax = []
errEHmax = []
errBHmax = []
errRPmax = []
colors = [(1,0,0,1),(148/255, 0, 211/255, 0.6), (31/255, 119/255, 180/255), (168/255, 159/255, 46/255),(0, 158/255, 115/255)]

foldAngles = np.array([30.]) 
angle = foldAngles[0]
creaseStiffnesses = np.linspace(0,1+1.0/3,num=13)[1:] #
panelSideLength = 20.0 
gmma = 60.0*np.pi/180
nu = 0.38
t = 0.13
alpha = 60
Ebase = 4000.0
kb = (0.55-0.42*120/180)*Ebase*t**3/(12*(1-nu**2))*(2*panelSideLength*np.sin(alpha/2*np.pi/180)/t)**(1/3)

#Detailed results (reference)
# Kcr=1.98, a=20, converged
elasConstDet = np.array([[-2.262673056572683, -2.2621706487208177, -2.261699111712862, -2.261254813684827, -2.2608359387047177, -2.2604412761512043, -2.260068404781627, -2.259714903353326, -2.259380771866303, -2.259064194388561, -2.258763354988107, -2.258477648354275],
                         [0.0067717094253315156, 0.0132631613441866, 0.019494179798282905, 0.025482589325791418, 0.031244489549838498, 0.03679445487923465, 0.042145740449851005, 0.047310420666999954, 0.052299533988463466, 0.057123195256152996, 0.0617906955464739, 0.06631059203565337],
                         [0.001387230584424905, 0.0027104011705956286, 0.003974789196885684, 0.005185017008725294, 0.006345161273549718, 0.007458846704141727, 0.008529305147708367, 0.0095594434930569, 0.010551886246093264, 0.011508999201997197, 0.012432939735846282, 0.013325670917171508],
                         [14.926564361756242, 14.926906159854317, 14.927237792953195, 14.927559261052872, 14.927871834778252, 14.928175514129332, 14.928471569731013, 14.928758730958393, 14.929039539061275, 14.929313994039656, 14.929582095893537, 14.92984384462292],
                         [2.2625167243305633, 2.2595773259594285, 2.2574739946195828, 2.25591879512077, 2.254726669530554, 2.2537699774369933, 2.253012637034223, 2.252393167320109, 2.251895795946074, 2.251472373960304, 2.2511256454719075, 2.2508279069834227],
                         [0.40788472862834957, 0.47307452014457857, 0.5357939613973141, 0.5962993079331201, 0.65478422735356, 0.7114059027774823, 0.7663054306373267, 0.8195926429618765, 0.8713776025691508, 0.9217364872275968, 0.97075876796401, 1.0185105108510477],
                         [0.08013717434736109, 0.09285579029247851, 0.10498148009295365, 0.11662497822382943, 0.12783918056592847, 0.13866166336726118, 0.14912553214880833, 0.15925645964008936, 0.16907430826133113, 0.1786034680706201, 0.1878585921901842, 0.19685701114604776],
                         [0.036075185532096245, 0.03708914643282094, 0.038019676832503846, 0.03887841826200907, 0.03967458009893612, 0.04041564623607278, 0.041107587907506835, 0.04175562503817989, 0.042364097270439584, 0.04293685433277105, 0.04347705976909604, 0.04398751224158243]])
normElasConstDet = np.zeros((8,len(creaseStiffnesses)))
for i in range(8):
    if i in [0,4]:
        normElasConstDet[i] = elasConstDet[i]
    if i in [1,2,3]:
        normElasConstDet[i] = elasConstDet[i]/Ebase
    if i in [5,6,7]:
        normElasConstDet[i] = elasConstDet[i]/Ebase

# Rigid panel
alpha = 60.0 *np.pi/180
n = 1000
theta0 = 2.57981 # 147.8122249456449 deg
xi0 = np.sin(alpha)*np.sin(theta0/2)
zeta0 = np.cos(alpha)*(1-xi0**2)**(-0.5)
beta0 = 2*np.arcsin(zeta0*np.sin(theta0/2))
w0 = 2*panelSideLength*xi0
l0 = 2*panelSideLength*zeta0
h0 = panelSideLength*zeta0*np.tan(alpha)*np.cos(theta0/2.0)
V0 = w0*l0*h0
deltaTheta = 2.17e-6
theta1 = theta0 + deltaTheta #theta0 after deformation
xi = np.sin(alpha)*np.sin(theta1/2.0)
zeta = np.cos(alpha)*(1-xi**2)**(-0.5)
beta = 2*np.arcsin(zeta*np.sin(theta1/2.0))
h = panelSideLength*zeta*np.tan(alpha)*np.cos(theta1/2.0)
Urig = 2*creaseStiffnesses*((deltaTheta)**2+(beta-beta0)**2)
w = 2*panelSideLength*xi
epsx = (w-w0)/w0
Zx = 2*Urig/epsx**2/V0
l = 2*panelSideLength*zeta
epsy = (l-l0)/l0
Zy = 2*Urig/epsy**2/V0
Zv = 1/(1-xi0**(-2))*np.ones(len(Urig))
stifRP = [Zv,Zx,Zy]
normStifRP = [Zv,Zx/Ebase,Zy/Ebase]

# Homogenized bar and hinge
elasConstHBH = np.array([[-2.249558e+00,-2.249117e+00,-2.248676e+00,-2.248234e+00,-2.247793e+00,-2.247352e+00,-2.246912e+00,-2.246471e+00,-2.246030e+00,-2.245590e+00,-2.245150e+00,-2.244710e+00],
[7.472274e-03,1.494214e-02,2.240960e-02,2.987466e-02,3.733731e-02,4.479756e-02,5.225541e-02,5.971086e-02,6.716391e-02,7.461456e-02,8.206281e-02,8.950867e-02],
[1.476187e-03,2.952262e-03,4.428226e-03,5.904078e-03,7.379819e-03,8.855448e-03,1.033097e-02,1.180637e-02,1.328167e-02,1.475685e-02,1.623192e-02,1.770688e-02],
[1.474409e+01,1.474410e+01,1.474411e+01,1.474411e+01,1.474412e+01,1.474413e+01,1.474414e+01,1.474415e+01,1.474415e+01,1.474416e+01,1.474417e+01,1.474418e+01],
[2.247310e+00,2.247091e+00,2.246871e+00,2.246652e+00,2.246433e+00,2.246214e+00,2.245994e+00,2.245775e+00,2.245556e+00,2.245337e+00,2.245118e+00,2.244899e+00],
[4.819974e-01,5.354394e-01,5.888749e-01,6.423040e-01,6.957265e-01,7.491425e-01,8.025521e-01,8.559551e-01,9.093516e-01,9.627417e-01,1.016125e+00,1.069502e+00],
[9.530281e-02,1.058737e-01,1.164442e-01,1.270141e-01,1.375836e-01,1.481527e-01,1.587212e-01,1.692893e-01,1.798569e-01,1.904241e-01,2.009908e-01,2.115570e-01],
[5.193910e-02,5.621575e-02,6.049239e-02,6.476903e-02,6.904567e-02,7.332231e-02,7.759895e-02,8.187559e-02,8.615223e-02,9.042886e-02,9.470550e-02,9.898213e-02]])
normElasConstHBH = np.zeros((8,len(creaseStiffnesses)))
for i in range(8):
    if i in [0,4]:
        normElasConstHBH[i] = elasConstHBH[i][0:len(creaseStiffnesses)]
    if i in [1,2,3]:
        normElasConstHBH[i] = elasConstHBH[i][0:len(creaseStiffnesses)]/Ebase
    if i in [5,6,7]:
        normElasConstHBH[i] = elasConstHBH[i][0:len(creaseStiffnesses)] /Ebase

# Asymptotic
laminaAH = {'theta30Kcr0_2222222222222222': {'v21': -0.44361847016146305, 'vb21': 0.4430476151467084, 'vb12': 2.2426824474037215, 'v12': -2.2478920407270313, 'M1': 0.5029178388981518, 'T12': 0.037746344171199125, 'M2': 0.09935269676565661, 'E1': 0.016844115033637204, 'G12': 13.716013452960192, 'E2': 0.0033241634415988523}, 'theta30Kcr0_8888888888888888': {'v21': -0.4415552443356606, 'vb21': 0.44140724162431083, 'vb12': 2.2414811944025, 'v12': -2.245549020709241, 'M1': 0.8383279811855977, 'T12': 0.040789934954696905, 'M2': 0.1650890681910238, 'E1': 0.05133118418335654, 'G12': 13.716744688983185, 'E2': 0.010093546551462966}, 'theta30Kcr0_7777777777777777': {'v21': -0.4418700060622238, 'vb21': 0.44166323345731934, 'vb12': 2.241653368161507, 'v12': -2.2458783138986798, 'M1': 0.7863341636113906, 'T12': 0.040368566189466104, 'M2': 0.154928007251807, 'E1': 0.04612395703320411, 'G12': 13.716654755527149, 'E2': 0.009074753982773045}, 'theta30Kcr1_3333333333333333': {'v21': -0.44038981850401654, 'vb21': 0.4404479636064918, 'vb12': 2.2410159277477937, 'v12': -2.2444038076695088, 'M1': 1.0275160572782018, 'T12': 0.04221952788341316, 'M2': 0.20194740670852018, 'E1': 0.0704810191753281, 'G12': 13.717159579260594, 'E2': 0.01382956272687424}, 'theta30Kcr1_0': {'v21': -0.4412500475405403, 'vb21': 0.44115807525564166, 'vb12': 2.2413448219566363, 'v12': -2.2452343413413334, 'M1': 0.8879150741778482, 'T12': 0.04117832607697541, 'M2': 0.17476601604424985, 'E1': 0.05637518718596556, 'G12': 13.716853019690534, 'E2': 0.011079268461150106}, 'theta30Kcr1_1111111111111112': {'v21': -0.4409548701671059, 'vb21': 0.44091221088979593, 'vb12': 2.2412188274300417, 'v12': -2.244940819072331, 'M1': 0.9366018122220665, 'T12': 0.04154559875696425, 'M2': 0.1842565173449629, 'E1': 0.061231687515745634, 'G12': 13.716972389106393, 'E2': 0.012027226102902655}, 'theta30Kcr0_1111111111111111': {'v21': -0.4440086414664229, 'vb21': 0.44335417351796375, 'vb12': 2.2430639294824446, 'v12': -2.2484023468910066, 'M1': 0.43507493627168925, 'T12': 0.037069462315098334, 'M2': 0.08599500275216083, 'E1': 0.01017900611667063, 'G12': 13.715867825774687, 'E2': 0.00201012362560055}, 'theta30Kcr0_4444444444444444': {'v21': -0.4428817433597637, 'vb21': 0.442471089643011, 'vb12': 2.242230261172227, 'v12': -2.247017186524831, 'M1': 0.6215284843522555, 'T12': 0.03892580325461985, 'M2': 0.12264948452338635, 'E1': 0.029223362331066947, 'G12': 13.716283770447113, 'E2': 0.005759855213227564}, 'theta30Kcr0_5555555555555556': {'v21': -0.442532773077778, 'vb21': 0.44218901390120646, 'vb12': 2.2419508371290653, 'v12': -2.246609952536224, 'M1': 0.6817071521280834, 'T12': 0.039446802653241915, 'M2': 0.13445585352573158, 'E1': 0.03508241721264762, 'G12': 13.716401779988495, 'E2': 0.006910464968722336}, 'theta30Kcr1_222222222222222': {'v21': -0.44066793730399295, 'vb21': 0.44068187638564066, 'vb12': 2.241130515042225, 'v12': -2.244665704225717, 'M1': 0.9812598809900321, 'T12': 0.04189079883053399, 'M2': 0.19294880091733102, 'E1': 0.06593181156850683, 'G12': 13.71706676843853, 'E2': 0.01294359126702631}, 'theta30Kcr0_6666666666666666': {'v21': -0.4421960697201435, 'vb21': 0.44192563162773785, 'vb12': 2.2418329771578738, 'v12': -2.2462436193028896, 'M1': 0.7330012387197755, 'T12': 0.03992316345426549, 'M2': 0.1444942770963348, 'E1': 0.04067325121627874, 'G12': 13.716528780107515, 'E2': 0.008006946208337022}, 'theta30Kcr0_3333333333333333': {'v21': -0.4432429791792875, 'vb21': 0.44275471670963606, 'vb12': 2.2424457292823146, 'v12': -2.2474473952160063, 'M1': 0.5633763422715601, 'T12': 0.03836072301239868, 'M2': 0.11123459068201708, 'E1': 0.023145005787595728, 'G12': 13.716144482801726, 'E2': 0.004564672499233196}}

# Energy equivalence
# a=20, Kcr=0.1,1.98, converged
laminaPBC = {'theta30Kcr0_2222222222222222': {'v21': -0.4434130480257794, 'vb21': 0.4429162750813433, 'vb12': 2.243899354040411, 'v12': -2.249012807901831, 'M1': 0.428150171776802, 'T12': 0.034777842983606796, 'M2': 0.08451122324954474, 'E1': 0.014198513004453142, 'G12': 13.649862938590527, 'E2': 0.002799364195089566}, 'theta30Kcr0_8888888888888888': {'v21': -0.4408187598426311, 'vb21': 0.44094257932559366, 'vb12': 2.2429786906645197, 'v12': -2.2468881981960864, 'M1': 0.770192072431954, 'T12': 0.03810481092569658, 'M2': 0.15141047946989408, 'E1': 0.049443753904175124, 'G12': 13.650631722870571, 'E2': 0.009700408901297995}, 'theta30Kcr0_7777777777777777': {'v21': -0.441215442250891, 'vb21': 0.44125088929774087, 'vb12': 2.243076341237649, 'v12': -2.2471769116351226, 'M1': 0.7179101734233719, 'T12': 0.03764627555512088, 'M2': 0.14122502058230046, 'E1': 0.04410385900919067, 'G12': 13.650516206666072, 'E2': 0.008659444459827487}, 'theta30Kcr1_0': {'v21': -0.44043448973655264, 'vb21': 0.4406415745375371, 'vb12': 2.2428970693120402, 'v12': -2.2466208028072687, 'M1': 0.8209114456051742, 'T12': 0.03853412103953647, 'M2': 0.1612770005795682, 'E1': 0.05460021858448979, 'G12': 13.650742952789322, 'E2': 0.010703995699547962}, 'theta30Kcr0_1111111111111111': {'v21': -0.44390204155020163, 'vb21': 0.44327792079828787, 'vb12': 2.244160189926736, 'v12': -2.2494767679567063, 'M1': 0.36308534275643456, 'T12': 0.03404645558618577, 'M2': 0.07171846133437577, 'E1': 0.007466548660492373, 'G12': 13.64971418975047, 'E2': 0.001473416503312951}, 'theta30Kcr0_4444444444444444': {'v21': -0.44248762747667264, 'vb21': 0.4422234887504842, 'vb12': 2.243489376135617, 'v12': -2.2481904607861067, 'M1': 0.5504131598503749, 'T12': 0.0360597512673732, 'M2': 0.10849421904661473, 'E1': 0.026859898501115607, 'G12': 13.650140872314282, 'E2': 0.005286550658998473}, 'theta30Kcr0_5555555555555556': {'v21': -0.44204904982039867, 'vb21': 0.44189092417904763, 'vb12': 2.2433287849713484, 'v12': -2.2478258594653804, 'M1': 0.6081690485092552, 'T12': 0.0366278975771127, 'M2': 0.11979714462865916, 'E1': 0.03282541737707807, 'G12': 13.65027112935992, 'E2': 0.006455324152622084}, 'theta30Kcr0_6666666666666666': {'v21': -0.4416252753232365, 'vb21': 0.4415668730542501, 'vb12': 2.2431921755913082, 'v12': -2.2474887747679833, 'M1': 0.6639475106216762, 'T12': 0.037155239937277755, 'M2': 0.13069643757119703, 'E1': 0.038568706154344844, 'G12': 13.65039611385125, 'E2': 0.007578643179667013}, 'theta30Kcr0_3333333333333333': {'v21': -0.44294194831482797, 'vb21': 0.44256507097405884, 'vb12': 2.243677902459098, 'v12': -2.2485851364359735, 'M1': 0.490486815992031, 'T12': 0.03544537107574378, 'M2': 0.09674843804159208, 'E1': 0.020656681841528034, 'G12': 13.650004967762477, 'E2': 0.004069096941158442},'theta30Kcr1_1111111111111112': {'v21': -0.4400619807255072, 'vb21': 0.44034756312418943, 'vb12': 2.2428296590968317, 'v12': -2.2463730868984233, 'M1': 0.8701676566895615, 'T12': 0.038937006978868406, 'M2': 0.17084498841835205, 'E1': 0.05958371211286179, 'G12': 13.650850179594029, 'E2': 0.011672382706279282}, 'theta30Kcr1_222222222222222': {'v21': -0.4397006016219905, 'vb21': 0.44006022852104076, 'vb12': 2.242774883039151, 'v12': -2.2461435345698315, 'M1': 0.9180539059071461, 'T12': 0.03931593988099472, 'M2': 0.18013355450132368, 'E1': 0.06440426825632643, 'G12': 13.650953639248034, 'E2': 0.012607651765564576}, 'theta30Kcr1_3333333333333333': {'v21': -0.439349779051224, 'vb21': 0.4397792935183225, 'vb12': 2.242731460766345, 'v12': -2.2459308130277202, 'M1': 0.9646484291558035, 'T12': 0.039673075441215754, 'M2': 0.18915880571931606, 'E1': 0.06907090090905656, 'G12': 13.65105356439341, 'E2': 0.013511674036099729}}

elasConsts = ['v12','E1','E2','G12','vb12','M1','M2','T12']
categories = [
    r"$\nu_{12}$",
    r"$E_1/E_\mathrm{base}$",
    r"$E_2/E_\mathrm{base}$",
    r"$G_{12}/E_\mathrm{base}$",
    r"$\nu^b_{12}$",
    r"$M_1/E_\mathrm{base}\ \mathrm{(mm^2)}$",
    r"$M_2/E_\mathrm{base}\ \mathrm{(mm^2)}$",
    r"$T_{12}/E_\mathrm{base}\ \mathrm{(mm^2)}$"
]
categories2 = [r'$\nu_{12}$', r'$E_1$', r'$E_2$',r'$G_{12}$',r'$\nu^b_{12}$', r'$M_1$', r'$M_2$',r'$T_{12}$']
plotlabel = ['(a)','(b)','(c)','(d)','(e)','(f)','(g)','(h)']
markers = ['*','^','D','o']
pltylim = [[-3,0],[0,2.5e-5],[0,5e-6],[0,5e-3],[0,3],[0,3e-4],[0,6e-5],[0,2.5e-5]]#[[-3,0],[0,0.7],[0,0.5],[0,100],[0,3],[0,20],[0,10],[0,2.5]]
fig, subplotAxes = plt.subplots(4, 2, figsize=(7, 8), sharex=True)
subplotAxes = subplotAxes.flatten()
EijPBC = np.zeros((8,len(creaseStiffnesses)))
normEijPBC = np.zeros((8,len(creaseStiffnesses)))
EijAH = np.zeros((8,len(creaseStiffnesses)))
normEijAH = np.zeros((8,len(creaseStiffnesses)))
for i in np.arange(0,8):
    for cs in range(len(creaseStiffnesses)):
        Kcr = creaseStiffnesses[cs]
        modelName = 'theta'+str(int(angle))+'Kcr'+str(Kcr).replace(".","_")
        EijAH[i][cs] = laminaAH[modelName][elasConsts[i]]
        if elasConsts[i] in ['v12','vb12']:
            normEijAH[i] = EijAH[i]
        if elasConsts[i] in ['E1','E2','G12']:
            normEijAH[i] = EijAH[i] / Ebase
        if elasConsts[i] in ['M1','M2','T12']:
            normEijAH[i] = EijAH[i] / Ebase
        EijPBC[i][cs] = laminaPBC[modelName][elasConsts[i]]
        if elasConsts[i] in ['v12','vb12']:
            normEijPBC[i] = EijPBC[i]
        if elasConsts[i] in ['E1','E2','G12']:
            normEijPBC[i] = EijPBC[i] / Ebase
        if elasConsts[i] in ['M1','M2','T12']:
            normEijPBC[i] = EijPBC[i] / Ebase
    ax1 = subplotAxes[i]
    ax1.set_ylabel(categories[i])
    if i in [6,7]:
        ax1.set_xlabel(r'$K_\mathrm{cr}/K_\mathrm{p}$')
    ax1.set_ylim(pltylim[i])#
    ax1.annotate(
            plotlabel[i],
            xy=(0.5, 1), xycoords='axes fraction',
            xytext=(-0.5, -1.5), textcoords='offset fontsize',
            fontsize='medium', verticalalignment='bottom', fontfamily='serif',
            bbox=dict(facecolor='1.0', edgecolor='none', pad=3.0))
    ax1.plot(creaseStiffnesses/kb,normEijAH[i],label='Asymptotic plate FE',color=colors[0],marker=markers[0],markevery=[0,4,8])
    ax1.plot(creaseStiffnesses/kb,normEijPBC[i],label='Energy-based plate FE',color=colors[1],marker=markers[1],markevery=[2,6,10])
    ax1.scatter(creaseStiffnesses[1::3]/kb,normElasConstDet[i][1::3],label='Detailed plate FE',color=colors[2],s=30,zorder=1)
    ax1.plot(creaseStiffnesses/kb,normElasConstHBH[i],label='Homogenized/detailed bar-and-hinge',color=colors[3],marker=markers[2],markevery=[3,7,11],markersize=4.5)
    if i in [0,1,2]:
        ax1.plot(creaseStiffnesses/kb,normStifRP[i], color=colors[4], linestyle='--', label='Rigid panel')
    if i == 0:
        ax1.legend(fontsize=12, loc='upper left', bbox_to_anchor=(2.5, 0.97))
    ax1.ticklabel_format(style='sci', axis='y', scilimits=(-2,2))

plt.tight_layout()
plt.subplots_adjust(wspace=0.25,hspace=0.15)
plt.savefig("modelingMethodsKcr.pdf", format="pdf", bbox_inches="tight")
plt.show()